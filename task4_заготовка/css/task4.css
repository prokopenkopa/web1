@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Lora:ital,wght@0,400..700;1,400..700&display=swap');

* {
    box-sizing: border-box;
}

body {
    font-family: "Inter", sans-serif;
}

/*правило, которое убирает стандартное подчёркивание с гиперссылок (тегов <a>). Свойство
text-decoration отвечает за декоративные линии у текста, а значение none означает 
отсутствие каких-либо эффектов, таких как подчёркивание (underline), 
зачёркивание (line-through) или надчёркивание (overline).*/
a {
    text-decoration: none;
}

header {
    /*правило, которое устанавливает максимальную ширину для элемента, ограничивая ее значением
в 1500 пикселей. Это означает, что элемент никогда не будет шире 1500 пикселей, но при этом 
сможет уменьшаться, если родительский контейнер или окно браузера станет меньше. 
Как это работает:
Ограничение сверху: Свойство max-width предотвращает увеличение ширины элемента выше заданного
 значения (в данном случае, 1500px). 
Гибкость макета: В отличие от фиксированного свойства width, которое задает точную ширину, 
max-width обеспечивает гибкость и позволяет элементам адаптироваться к разным размерам экранов,
избегая горизонтальной прокрутки. 
Приоритет: Если у элемента есть свойство width, которое больше, чем max-width, то браузер 
примет ширину элемента равной max-width.*/
    max-width: 1500px;
    /*сокращенная запись для установки нулевых отступов сверху и снизу элемента, а также для 
горизонтального центрирования его путем автоматического распределения доступного пространства 
по бокам. Этот прием эффективно центрирует блочные элементы внутри их родительского контейнера,
но требует, чтобы у центрируемого элемента была явно задана ширина. */
    margin: 0 auto;
    /*задает внутренние отступы для элемента: 60px сверху, 100px справа и слева, и 40px снизу, 
устанавливая по часовой стрелке, начиная с верхнего края. Это свойство создает пространство 
между содержимым элемента и его границей, улучшая читаемость и внешний вид интерфейса. 
Как работает правило с тремя значениями:
Когда вы используете три значения для свойства padding, они применяются следующим образом: 
Первое значение (60px): задает отступ для верхней стороны элемента.
Второе значение (100px): задает отступы для правой и левой сторон элемента.
Третье значение (40px): задает отступ для нижней стороны элемента.*/
    padding: 60px 100px 40px;
    /*превращает элемент в флекс-контейнер, что позволяет гибко управлять расположением, размерами
и выравниванием его дочерних элементов (флекс-элементов) по одной оси (в строчку или в столбец).
Этот способ создания макетов (layout) делает их адаптивными и удобными для построения 
пользовательских интерфейсов.*/
    display: flex;
    /*используется для выравнивания элементов внутри флекс-контейнера (flex container) 
или сетки (grid container) по центру поперечной оси. Поперечная ось является противоположной 
основной оси (flex-direction). Это свойство располагает flex-элементы или элементы сетки ровно
посередине контейнера, обеспечивая их центральное расположение как по вертикали 
(при строчном расположении), так и по горизонтали (при расположении в столбец). */
    align-items: center;
    /*свойство, которое распределяет флекс-элементы или элементы сетки вдоль главной оси 
(по умолчанию — горизонтальной) таким образом, что первый элемент прижимается к началу 
контейнера, последний — к концу, а между всеми остальными элементами создаются равные промежутки.*/
    justify-content: space-between;
}

/*Настройка Riverside начало шапки*/
.logo {
    /*правило, которое устанавливает размер шрифта для выбранного элемента в 32 пикселя. Пиксели (px) 
являются абсолютной единицей измерения, которая задает фиксированный размер текста, не зависящий 
от других настроек браузера или устройства, что делает его полезным, когда важно сохранить 
точный размер. */
    font-size: 32px;
    text-transform: uppercase;
    font-weight: 900;
    color: #067bb2;
}

/*Настройка About us Events Contact Us середины шапки*/
nav {
    display: flex;
    align-items: center;
    gap: 35px;
}

nav a {
    color: black;
    /*устанавливает размер шрифта элемента*/
    font-size: 20px;
}

/*Настройка кнопок сайта*/
button {
    background: #067bb2;
    color: white;
    border: none;
    text-transform: uppercase;
    padding: 10px 80px;
    font-size: 20px;
    /*задает курсор в виде руки с указательным пальцем, который сигнализирует пользователю,
что над элементом можно совершить действие, например, нажать на ссылку или кнопку. 
Это один из стандартных видов курсора, используемых для интерактивных элементов веб-страницы,
улучшая пользовательский опыт и подсказывая, что элемент активен. */
    cursor: pointer;
}

button:hover {
    background: rgb(6, 173, 224, 0.73);
}

/*Настройка иконки En*/
.lang {
    display: flex;
    align-items: center;
    /*Интервал между иконкой и En*/
    gap: 3px;
}

.burger-btn {
    /*делает фон элемента полностью прозрачным, позволяя видеть фон родительского элемента или
контент под ним. Технически это сокращение для background-color: rgba(0, 0, 0, 0). 
Это значение по умолчанию для свойства background-color, что означает, что если вы 
не устанавливаете цвет фона, он будет прозрачным. */
    background: transparent;
    padding: 0;
    display: none;
}

/*Настройка основного поля сайта*/
.hero {
    height: 981px;
    background: url(../images/hero.png);
    /*заставляет фоновое изображение заполнить всю область элемента, растягивая его до тех пор,
пока оно полностью не заполнит контейнер, даже если это приведет к обрезке части изображения. 
Это гарантирует, что элемент никогда не будет иметь пустых пространств вокруг фона и что 
изображение сохранит свои пропорции. */
    background-size: cover;
    display: flex;
    align-items: end;
    justify-content: center;
    /*создает отступ в 140 пикселей под элементами. */
    padding-bottom: 140px;
}

.hero-choose {
    padding: 24px 20px;
    width: 235px;
    height: 100px;
    color: white;
    display: flex;
    /*используется для свойства Flexbox, чтобы выстроить дочерние элементы флекс-контейнера 
в столбец, располагая их вертикально сверху вниз, а не горизонтально в строку 
(поведение по умолчанию row). Это свойство меняет направление главной оси контейнера,
делая её вертикальной. */
    flex-direction: column;
    justify-content: center;

}

/*Это псевдокласс, который позволяет выбрать первый дочерний элемент любого типа внутри его 
родителя и применить к нему стили. Он используется для целенаправленного стилистического 
оформления элементов в зависимости от их порядкового номера в списке однотипных 
или разных элементов. */
.hero-choose:nth-child(1) {
    background: #7b7b7b;
}

.hero-choose:nth-child(2) {
    background: #504f4f;
}

.hero-choose:nth-child(3) {
    background: #303030;
}

.hero-choose {
    line-height: 160%;
}

.hero-choose select {
    background: transparent;
    /*указывает, что у элемента не должно быть рамки (границы). Оно устанавливает для 
свойства border-style значение none, что равносильно тому, что толщина рамки равна
нулю, и рамка не отображается вовсе. Это часто используется для удаления стандартных
рамок у элементов, например, в таблицах или для сброса стилей. */
    border: none;
    color: white;
    /*станавливает размер шрифта элемента в 20 пикселей*/
    font-size: 20px;
    font-weight: 600;
}

.hero button {
    height: 100px;
    padding: 20px;
}

.about-us {
    margin: 100px auto;
    max-width: 1080px;
    padding: 0 30px;
    line-height: 150%;
    text-align: center;
}

.our-events {
    text-align: center;
    padding: 30px;
}

h2 {
    font-size: 64px;
    color: #888;
    font-family: "Lora", serif;
    font-weight: 700;
    /*устанавливает межстрочный интервал, который рассчитывается как 150% (или 1,5)
от размера шрифта самого элемента. Это означает, что высота каждого блока строки,
включая пространство над и под текстом, будет в полтора раза больше, чем размер шрифта.*/
    line-height: 150%;
    text-align: center;
}

.about-us p {
    /*устанавливает внешний отступ размером 30 пикселей для всех сторон элемента 
(сверху, справа, снизу и слева). Это свойство отвечает за создание пустого пространства
 снаружи элемента, отделяя его от других блоков на странице, в отличие от padding, 
 который формирует пространство внутри элемента.*/
    margin: 30px;
}

.cards {
    display: grid;
    /*означает создание сетки с тремя столбцами одинаковой ширины, где repeat() указывает 
на повторение, 3 — на количество повторений, а 1fr — на единицу дробного пространства, 
которая равномерно распределяется между столбцами, обеспечивая адаптивность. */
    grid-template-columns: repeat(3, 1fr);
    max-width: 1300px;
    margin: 25px auto;
    gap: 20px;
}

.card {
    /*устанавливает относительное позиционирование элемента, сдвигая его визуально от его 
исходного места в потоке документа, а не от другого элемента или окна браузера. Для этого 
используются свойства top, bottom, left, right, которые определяют величину смещения. 
При этом, место, которое элемент занимал изначально, остается занятым, и другие элементы 
его не используют, а смещенный элемент может перекрывать другие объекты. */
    position: relative;
}

.card-date {
    /*это свойство, которое полностью удаляет элемент из обычного потока документа, 
позволяя позиционировать его относительно ближайшего родительского элемента с установленным
позиционированием (не static) или относительно всего документа, если такого родителя нет. 
Для точного расположения используются свойства top, bottom, left и right, а также inset. */
    position: absolute;
    top: 0;
    left: 0;
    background: white;
    width: 130px;
    height: 130px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    font-size: 20px;
}


.card-date-day {
    font-size: 40px;
}

.card img {
    /*устанавливает ширину элемента как 100% от ширины его родительского контейнера*/
    width: 100%;
    height: 360px;
    /*используется для масштабирования содержимого (например, изображения или видео)
 внутри его контейнера таким образом, чтобы полностью заполнить этот контейнер, 
 сохраняя исходное соотношение сторон, но при этом обрезая лишние части 
 содержимого, которые не помещаются. 
 Это аналог свойства background-size: cover; для фоновых изображений, 
 но применяется к встроенным элементам, таким как <img> и ` */
    object-fit: cover;
}

.card-body {
    padding: 40px;
    text-align: center;
    display: flex;
    /*указывает, что дочерние элементы flex-контейнера должны располагаться в столбец,
а не в строку. При использовании этого значения основная ось контейнера направлена
вертикально сверху вниз, что меняет стандартный горизонтальный порядок 
расположения элементов на вертикальный.*/
    flex-direction: column;
    gap: 10px;
    text-transform: uppercase;
}

.card-body h4 {
    font-size: 20px;
    font-weight: 500;
    text-transform: none;
}

.contact-us {
    max-width: 940px;
    margin: 100px auto;
    padding: 30px;
}

.contact-form {
    display: flex;
    flex-direction: column;
    gap: 60px;

}

.contact-form-fields {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 60px;
    margin-top: 100px;
}

.contact-form-fields input {
    /*свойство, которое полностью удаляет границу элемента, делая ее невидимой и не занимающей
 места в макете страницы. Оно является сокращенным способом для свойства border-style, 
 устанавливая тип границы в значение none, что означает отсутствие какой-либо рамки вокруг элемента. */
    border: none;
    /*сокращенное свойство, которое устанавливает нижнюю границу элемента, задавая одновременно её 
толщину (1px), тип линии (solid - сплошная) и цвет (black - черный) за одну декларацию. */
    border-bottom: 2px solid black;
    padding: 10px 0px;
    /*удаляет визуальную обводку (контур), которая по умолчанию появляется вокруг интерактивных элементов 
(например, ссылок или полей ввода) при получении ими фокуса. Это позволяет заменить стандартное 
выделение браузера на собственную стилизацию, которая может быть более подходящей для дизайна сайта, 
но важно помнить о доступности и обеспечивать визуальную обратную связь для пользователей. */
    outline: none;
}

.contact-form textarea {
    resize: none;
    height: 100px;
    /*solid: Устанавливает тип линии как сплошную. Другие возможные значения: dotted (точечная), 
dashed (пунктирная), double (двойная) и т.д. */
    border: 1px solid black;
    outline: none;
}

.contact-form button {
    /*правило, которое устанавливает фиксированную ширину HTML-элемента равную 235 пикселям*/
    width: 235px;
    /*Устанавливам кнопку по центру*/
    display: block;
    margin: 0 auto;
}

footer {
    background: #033c65;
    padding: 60px;
}

.footer-body {
    max-width: 1160px;
    margin: 0 auto;
    color: white;
}


.footer-body h3 {
    color: white;
    font-size: 64px;
    text-align: center;
    text-transform: uppercase;
    font-weight: 900;
}

.footer-body-links {
    display: flex;
    justify-content: space-between;
    padding: 65px 0px 30px;
}

.footer-body-links ul {
    display: flex;
    /*определяет, что дочерние элементы внутри flex-контейнера будут располагаться друг под другом,
формируя столбец. Это свойство меняет главную ось контейнера на вертикальную (сверху вниз), 
в то время как по умолчанию главная ось является горизонтальной (flex-direction: row). */
    flex-direction: column;
    gap: 15px;
}

.footer-body-links a {
    font-weight: 100;
    color: white;
}

.footer-body-links h4 {
    /*устанавливает внешний отступ в 15 пикселей снизу элемента, увеличивая расстояние от 
его нижнего края до верхнего края следующего соседнего элемента. Это позволяет 
управлять свободным пространством между блоками в веб-странице, делая ее более 
читаемой и структурированной. */
    margin-bottom: 15px;
    font-family: "Lora", serif;
    font-weight: 700;
    font-size: 24px;
}

.footer-social-media {
    display: flex;
    align-items: center;
    gap: 15px;
    margin: 20px 0px;

}

.footer-policy {
    display: flex;
    align-items: center;
    gap: 15px;
    border-top: 2px solid white;
    /*устанавливает внутренние отступы для элемента: 15px сверху, 0px справа, 32px снизу, 
и 0px слева, так как при указании трёх значений, первое относится к верхнему отступу,
второе — к правому и левому, а третье — к нижнему. */
    padding: 15px 0px 32px;

}


.footer-policy a {
    color: white;
    font-weight: 100;
}


.rights {
    font-weight: 100;
    /*устанавливает полупрозрачность для элемента, делая его видимым на 50% и позволяя видеть
 фон сквозь него. Значение opacity принимает числовые значения от 0.0 (полная прозрачность/невидимость)
 до 1.0 (полная непрозрачность). */
    opacity: 0.5;
}

@media screen and (max-width: 992px) {
    .burger-btn {
        display: block;
    }

    nav {
        display: none;
    }

    .cards {
        grid-template-columns: repeat(1, 1fr);
    }

    .card img {
        /*устанавливает высоту элемента равной 60% от ширины области просмотра (viewport) 
браузера, причем эта высота будет динамически изменяться при изменении размера окна. 
Таким образом, vw (viewport width) является относительной единицей измерения, и 
60vw означает, что высота элемента составит 60% от текущей ширины видимой части 
окна браузера, а не его содержимого. */
        height: 60vw;
    }
}

@media screen and (max-width: 768px) {
    .hero {
        /*заставляет элементы внутри flex-контейнера располагаться вертикально, сверху вниз,
 формируя столбец вместо стандартного горизонтального расположения в строку. 
 Это меняет главную ось flex-контейнера на вертикальную, так что поперечная 
 ось становится горизонтальной. */
        flex-direction: column;
        align-items: center;
        justify-content: end;
    }

    .hero button,
    .hero-choose {
        width: max(70%, 300px);
    }

    .contact-form-fields {
        grid-template-columns: repeat(1, 1fr);
        gap: 30px;
        margin-top: 40px;
    }

    .contact-form {
        gap: 30px;

    }
}

@media screen and (max-width: 550px) {

    .footer-body-links,
    .footer-policy,
    .footer-social-media,
    .rights {
        display: none;
    }

    .footer-body h3 {
        font-size: 32px;
    }

}




@media screen and (max-width: 450px) {
    header {
        padding: 30px;
    }

    .logo {
        font-size: 20px;
    }

    h2 {
        font-size: 20px;
    }

    .about-us p {
        font-size: 14px;
        margin: 14px 0px;
        color: #303030;
    }

    .card-date {
        width: 70px;
        height: 70px;
        font-size: 16px;
    }

    .card-date {
        font-size: 20px;
    }
}