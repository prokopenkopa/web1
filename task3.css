@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');

* {
    font-family: "Poppins", sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
/*Карточка во всю высоту экрана
height: 100vh устанавливает высоту элемента равной 100% высоты области просмотра 
(viewport), то есть всей видимой области браузера. Это гарантирует, что элемент 
займет полную вертикальную высоту экрана, независимо от содержимого страницы или 
других элементов. Единица vh (viewport height) означает "высота области просмотра",
где 1vh равен 1% этой высоты. */
    min-height: 100vh;
    background-color: black;
    color: white;
}

.cards {
/*Расположение карточек в горизонтально
display: flex в CSS — это свойство, которое превращает элемент в флекс-контейнер, 
а его дочерние элементы — в флекс-элементы. Это позволяет создавать гибкие (Flexible)
макеты, автоматически располагая и выравнивая содержимое внутри контейнера 
по одной оси (в строку или столбец), что идеально подходит для адаптивной верстки 
и построения пользовательских интерфейсов. */
    display: flex;
/*Карточки во всю высоту экрана*/
    height: 100vh;
/*Расстояние между карточками*/
    gap: 2px;

/*Когда вы используете overflow: hidden, браузер просто обрезает все, что не поместилось внутри блока.
свойство, которое скрывает любое содержимое элемента, которое выходит за пределы его заданных размеров 
(ширины и высоты). Это означает, что не поместившаяся часть контента будет невидима для пользователя, 
в отличие от значения по умолчанию overflow: visible, которое позволяет всему содержимому отображаться */
    overflow: hidden;

}


.card-1 {
/* Cвойство, которое позволяет установить изображение в качестве фона для элемента, используя
путь к файлу изображения, указанный внутри скобок url(), например, url('путь/к/изображению.jpg'). 
Это универсальный способ задать не только фоновое изображение, но и другие параметры фона, такие 
как цвет, размер, положение и повторение, в одном объявлении.*/
    background: linear-gradient(rgb(0, 0, 0, 0), rgb(0, 0, 0, 0.7)), url(Image.png);
}

.card-2 {
    background: linear-gradient(rgb(0, 0, 0, 0), rgb(0, 0, 0, 0.7)), url(Image-1.png);
}

.card-3 {
    background: linear-gradient(rgb(0, 0, 0, 0), rgb(0, 0, 0, 0.7)), url(Image-2.png);
}

.card-4 {
    background: linear-gradient(rgb(0, 0, 0, 0), rgb(0, 0, 0, 0.7)), url(Image-3.png);
}

.card {
    padding: 40px;

/*преобразует элемент в "флекс-контейнер", делая его гибким блоком, чьи дочерние элементы 
    становятся "флекс-элементами". Это позволяет автоматически выравнивать, распределять и 
    управлять размерами элементов как по горизонтали, так и по вертикали, создавая адаптивные и
    сложные макеты веб-страниц. */
    display: flex;

/*используется во flex-контейнерах, чтобы расположить дочерние элементы (флекс-элементы) 
вертикально, один под другим, меняя главную ось контейнера с горизонтальной на вертикальную.
Это позволяет выстраивать контент в виде столбца вместо стандартного ряда. */
    flex-direction: column;

/*В CSS justify-content: end (сокращенный вариант flex-end) — это значение 
свойства justify-content, которое располагает элементы внутри флекс-контейнера 
или Grid-контейнера в конце главной оси (обычно горизонтальной). Другими словами, 
все дочерние элементы будут прижаты к правому краю контейнера, занимая его "конец", 
а любое свободное пространство окажется в начале.*/
    justify-content: end;

/*"solid" в CSS — это значение свойства border-style, 
которое задаёт элементу сплошную линию в качестве границы. 
Это одно из самых часто используемых значений стиля границы, 
в отличие от точечных (dotted) или пунктирных (dashed) линий.*/
/* border: 2px solid; - ЭТО СТРОКА НУЖНА БЫЛА КАК БЫ ПРОВЕРКОЙ ГРАНИЦ КАРТОЧЕК*/

    /*Растяжение карточек на весь экран*/
    flex: 1;

/* Отступ между колонками текста, упрощает код и предотвращая проблемы с margin. Как работает gap
Упрощение кода: Вместо того чтобы применять margin к каждому элементу и убирать его у последнего в ряду,
вы задаёте один отступ для всего контейнера. 
Единообразие: gap гарантирует одинаковые отступы между всеми элементами, что делает макет более 
предсказуемым. 
Совместимость с адаптивным дизайном: Отступы, заданные с помощью gap, корректно работают при изменении
размеров экрана и добавлением/удалением элементов. 
Многоколоночные макеты: gap может использоваться для отступов между колонками текста, как в газете*/
    gap: 16px;

/*устанавливает фоновое изображение так, чтобы оно полностью заполнило весь контейнер, сохраняя при 
этом свои пропорции и, при необходимости, обрезая края изображения, если его соотношение сторон не совпадает
с пропорциями контейнера. Это свойство гарантирует, что элемент будет полностью покрыт фоном без пустых мест, 
даже если часть изображения будет видна за пределами его границ.
Вы можете задать размер в пикселях или процентах, а также использовать ключевые слова, 
такие как auto (размер изображения сохраняется по умолчанию), 
cover (изображение растягивается, чтобы заполнить весь элемент, возможно с обрезкой) или 
contain (изображение масштабируется так, чтобы оно целиком поместилось в элемент). */
    background-size: cover;

/*Определяет начальную позицию фонового изображения внутри элемента Система координат: Позиция фона определяется
в системе координат, где верхний левый угол элемента соответствует точке (0,0). 
Порядок значений: Обычно задается два значения: первое для горизонтального положения (по оси X), 
второе для вертикального (по оси Y). 
Типы значений
Ключевые слова:
top, center, bottom для вертикали. 
left, center, right для горизонтали. 
Например: background-position: center center; — выравнивает изображение по центру элемента. */
    background-position: center;
/*Позволяет создавать плавные переходы между двумя состояниями элемента, браузер плавно переходит 
от старого значения к новому, вместо того чтобы мгновенно изменять его.*/    
    transition: 0.3s;
}

/* Это псевдокласс, который применяется к элементу и позволяет изменить его стили, когда пользователь 
наводит на него курсор мыши. Как работает hover:
Отслеживание наведения: Браузер автоматически определяет, когда курсор мыши наведен на элемент, на который
применен псевдокласс :hover. 
Применение стилей: В этот момент для данного элемента активируется набор CSS-стилей, которые были прописаны 
для состояния :hover. 
Возврат к обычным стилям: Когда курсор мыши убирается с элемента, стили :hover перестают действовать, и 
элемент возвращается к своим исходным стилям.*/
.card:hover{
/*Позволяет масштабировать элемент, то есть изменять его размер (увеличивать или уменьшать) по горизонтали
и/или по вертикали. Значение 1 сохраняет исходный размер, значения больше 1 увеличивают его, 
а значения меньше 1 (например, 0.5) уменьшают*/    
    transform: scale(105%);

/* Свойство, которое управляет порядком наложения позиционированных элементов на веб-странице, определяя
их положение по оси Z (глубине). По умолчанию элементы располагаются в одном "слое", 
но с помощью z-index вы можете "поднимать" одни элементы выше других.*/    
z-index: 1;

/*position: relative; используется для относительного позиционирования элемента, то есть для его смещения 
относительно его исходного положения в потоке документа, при этом место, которое элемент занимал бы без смещения,
остается для него. Это смещение выполняется с помощью свойств top, bottom, left и right, но оно визуальное 
и не влияет на положение других элементов на странице.  */
position: relative;
}

h3 {
/*определяет размер шрифта текста элемента, используя абсолютные (например, px, pt) 
или относительные (например, em, %, rem, а также текстовые константы) значения. Это один из 
основных способов управления внешним видом текста на веб-странице, позволяющий задавать высоту
символов */
    font-size: 38px;

/*свойство, которое управляет регистром (строчными или заглавными буквами) текста, не изменяя 
при этом его исходное содержимое в HTML-документе. С помощью него можно сделать весь текст 
заглавным (uppercase), весь строчным (lowercase) или 
начинать каждое слово с заглавной буквы (capitalize).*/
    text-transform: uppercase;
    /*Высота линий текста*/
    line-height: 38px;
}

h4 {
    font-size: 12px;
    text-transform: capitalize;

/*Прозрачность текста. Cвойство opacity в CSS устанавливает степень непрозрачности элемента, позволяя сделать его полностью
или частично прозрачным, при этом значение 1 означает полную непрозрачность, а 0 — полную прозрачность.
opacity применяется ко всему элементу, включая его содержимое, и может использоваться для создания 
визуальных эффектов, таких как полупрозрачные фоны или изменение видимости элементов при наведении курсора.*/ 
    opacity: 0.7;

/*устанавливает нормальную (обычную) толщину шрифта для выбранного элемента, что является стандартным 
значением по умолчанию */
    font-weight: normal;
}